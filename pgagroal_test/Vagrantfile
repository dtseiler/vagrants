# -*- mode: ruby -*-
# vi: set ft=ruby :

PGAGROAL_VERSION = "1.1.0"

servers = [
    {
        :name => "pgagroal-test-db",
        :ipaddr => "192.168.12.101",
        :mem => "1024"
    },
    {
        :name => "pgagroal-test-client",
        :ipaddr => "192.168.12.103",
        :mem => "512"
    },
    {
        :name => "pgagroal-test",
        :ipaddr => "192.168.12.102",
        :mem => "1024"
    }
]

Vagrant.configure("2") do |config|
    servers.each do |server|
        config.vm.define server[:name] do |srv|

            srv.vm.box = "bento/ubuntu-18.04"
            srv.vm.network :private_network, ip: server[:ipaddr]
            srv.vm.hostname = server[:name]

            srv.vm.provider :virtualbox do |vb|
                vb.name = server[:name]
                vb.memory = server[:mem]
                vb.gui = false
            end

            srv.vm.provision "shell", inline: <<-SHELL

        		cat > /etc/apt/sources.list <<EOF
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic main restricted
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates main restricted

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic universe
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates universe

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic multiverse
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates multiverse

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security main restricted
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security universe
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security multiverse
EOF
				apt-get -y update
				apt-get -y install curl ca-certificates
				curl -s #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/ACCC4CF8.asc | apt-key add -
				echo "deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list
				apt-get -y update

                if [ $(hostname) = 'pgagroal-test-db' ]
                then
					apt-get -y install postgresql-12
					sudo -u postgres psql -c "create user dts password 'test123';"
					sudo -u postgres psql -c "create database dts_test owner dts;"
                elif [ $(hostname) = 'pgagroal-test-client' ]
                then
					apt-get -y install postgresql-client-12

					echo '*:*:*:dts:test123' >> /home/vagrant/.pgpass
					chown vagrant /home/vagrant/.pgpass
					chmod 0600 /home/vagrant/.pgpass
				else
                    adduser pgagroal

					# Build pgagroal
					apt-get -y install cmake gcc-8 openssl libssl-dev libev-dev libsystemd-dev python3-docutils
					update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8
					update-alternatives --set gcc /usr/bin/gcc-8

					curl -sSLO https://github.com/agroal/pgagroal/releases/download/#{PGAGROAL_VERSION}/pgagroal-#{PGAGROAL_VERSION}.tar.gz
					tar -xzf pgagroal-#{PGAGROAL_VERSION}.tar.gz
					mkdir pgagroal-#{PGAGROAL_VERSION}/build
					cd pgagroal-#{PGAGROAL_VERSION}/build
					cmake -DCMAKE_INSTALL_PREFIX=/usr/local ..
					make
					make install

					# /usr/local/lib is not in LD_LIBRARY_PATH by default
					echo "/usr/local/lib" >> /etc/ld.so.conf.d/pgagroal.conf
					ldconfig

                    mkdir /var/log/pgagroal
                    chown -R pgagroal /var/log/pgagroal

					# Configure pgagroal database
        		    cat > /usr/local/etc/pgagroal/pgagroal.conf <<EOF
[pgagroal]
host = 192.168.12.102
port = 2345

log_type = file
log_level = debug1
log_path = /var/log/pgagroal/pgagroal.log

max_connections = 100
idle_timeout = 600
validation = off
unix_socket_dir = /tmp/
pipeline = transaction

[test-db]
host = 192.168.12.101
port = 5432
EOF
                    chown -R pgagroal /usr/local/etc/pgagroal

					# Configure pgagroal logging
					#sed -i 's#^log_type .*#log_type = file#' /usr/local/etc/pgagroal/pgagroal.conf
					#sed -i 's#^log_level .*#log_level = debug1#' /usr/local/etc/pgagroal/pgagroal.conf
					#sed -i 's#^log_path .*#log_path = /var/log/pgagroal/pgagroal.log#' /usr/local/etc/pgagroal/pgagroal.conf

					# Start pgagroal in daemon mode
					#sudo -u postgres /usr/local/bin/pgagroal -d -c /usr/local/etc/pgagroal/pgagroal.conf -a /usr/local/etc/pgagroal/pgagroal_hba.conf
					sudo -u pgagroal /usr/local/bin/pgagroal -d -c /usr/local/etc/pgagroal/pgagroal.conf -a /usr/local/etc/pgagroal/pgagroal_hba.conf

					# Test connections
					#sudo -u vagrant psql -h localhost -p 2345 -U dts -d dts_test -c "select now();"
					#sudo -u vagrant psql -h localhost -p 2345 -U dts -d dts_test -c "create table dts_tables as select * from pg_tables;"
					#sudo -u vagrant psql -h localhost -p 2345 -U dts -d dts_test -c "select count(*) from dts_tables;"

					# Report
					#sudo -u postgres pgagroal-cli -c /usr/local/etc/pgagroal/pgagroal.conf status
					sudo -u pgagroal pgagroal-cli -c /usr/local/etc/pgagroal/pgagroal.conf status
				fi

			SHELL
		end
	end
end
