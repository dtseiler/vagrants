# -*- mode: ruby -*-
# vi: set ft=ruby :

# define hostname
NAME = "pgagroal-test"
PGAGROAL_VERSION = "1.0.2"

Vagrant.configure("2") do |config|
    config.vm.define NAME
    config.vm.box = "bento/ubuntu-18.04"
    config.vm.hostname = NAME

    config.vm.provision "shell", inline: <<-SHELL
        cat > /etc/apt/sources.list <<EOF
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic main restricted
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates main restricted

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic universe
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates universe

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic multiverse
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates multiverse

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security main restricted
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security universe
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security multiverse
EOF
        apt-get -y update
        apt-get -y install curl ca-certificates
        curl -s #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/ACCC4CF8.asc | apt-key add -
        echo "deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list
        apt-get -y update
        apt-get -y install postgresql-12
        sudo -u postgres psql -c "create user dts password 'test123';"
        sudo -u postgres psql -c "create database dts_test owner dts;"
        echo '*:*:*:dts:test123' >> /home/vagrant/.pgpass
        chown vagrant /home/vagrant/.pgpass
        chmod 0600 /home/vagrant/.pgpass

        # Build pgagroal
        apt-get -y install cmake gcc-8 openssl libssl-dev libev-dev libsystemd-dev python3-docutils
        update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8
        update-alternatives --set gcc /usr/bin/gcc-8

        curl -sSLO https://github.com/agroal/pgagroal/releases/download/#{PGAGROAL_VERSION}/pgagroal-#{PGAGROAL_VERSION}.tar.gz
        tar -xzf pgagroal-#{PGAGROAL_VERSION}.tar.gz
        mkdir pgagroal-#{PGAGROAL_VERSION}/build
        cd pgagroal-#{PGAGROAL_VERSION}/build
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local ..
        make
        make install

        # /usr/local/lib is not in LD_LIBRARY_PATH by default
        echo "/usr/local/lib" >> /etc/ld.so.conf.d/pgagroal.conf
        ldconfig

        # Configure pgagroal logging
        sed -i 's#^log_type .*#log_type = file#' /usr/local/etc/pgagroal/pgagroal.conf
        sed -i 's#^log_level .*#log_level = debug1#' /usr/local/etc/pgagroal/pgagroal.conf
        sed -i 's#^log_path .*#log_path = /var/log/postgresql/pgagroal.log#' /usr/local/etc/pgagroal/pgagroal.conf

        # Start pgagroal in daemon mode
        sudo -u postgres /usr/local/bin/pgagroal -d -c /usr/local/etc/pgagroal/pgagroal.conf -a /usr/local/etc/pgagroal/pgagroal_hba.conf

        sudo -u vagrant psql -h localhost -p 2345 -U dts -d dts_test -c "select now();"
        sudo -u vagrant psql -h localhost -p 2345 -U dts -d dts_test -c "create table dts_tables as select * from pg_tables;"
        sudo -u vagrant psql -h localhost -p 2345 -U dts -d dts_test -c "select count(*) from dts_tables;"
        sudo -u vagrant pgagroal-cli -c /usr/local/etc/pgagroal/pgagroal.conf status
    SHELL
end
