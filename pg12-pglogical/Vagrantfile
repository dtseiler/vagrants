# -*- mode: ruby -*-
# vi: set ft=ruby :

password_cipher = %x(openssl rand -hex 12 | tr -d '\n')

# Load setup Vagrantfile
load "../Vagrantfile.setup"

servers = [
  {
    :name => "source-vm",
    :ipaddr => "192.168.60.101",
    :box => "bento/ubuntu-18.04",
    :pg_version => 12
  },
  {
    :name => "target-vm",
    :ipaddr => "192.168.60.102",
    :box => "bento/ubuntu-20.04",
    :pg_version => 14
  }
]

Vagrant.configure("2") do |config|
  servers.each do |server|
    config.vm.define server[:name] do |srv|

      srv.vm.box = server[:box]
      srv.vm.network :private_network, ip: server[:ipaddr]
      srv.vm.hostname = server[:name]

      srv.vm.provider :virtualbox do |vb|
        vb.name = server[:name]
        vb.memory = 1024
        vb.gui = false
      end

      srv.vm.provision "shell", inline: <<-SHELL
        apt-get -y install postgresql-common
        if [ $(hostname) = 'target-vm' ]
        then
          # Enable data checksums on the replica (but not primary)
          echo "initdb_options = '--data-checksums'" >> /etc/postgresql-common/createcluster.conf
        fi

        apt-get -y install postgresql-#{server[:pg_version]} postgresql-#{server[:pg_version]}-pglogical

        echo "shared_preload_libraries = 'pglogical'" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
        echo "listen_addresses = '*'" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
        echo "max_wal_senders = 10" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
        echo "max_replication_slots = 10" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
        echo "wal_level = logical" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
        echo "track_commit_timestamp = on" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
        echo "pglogical.conflict_resolution = 'last_update_wins'" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf

        su -l postgres -c "echo 'export PATH=/usr/lib/postgresql/#{server[:pg_version]}/bin:\$PATH' >> /var/lib/postgresql/.pgsql_profile"
        su -l postgres -c "echo '*:*:*:replicator:#{password_cipher}' >> /var/lib/postgresql/.pgpass"
        su -l postgres -c "chmod 0600 /var/lib/postgresql/.pgpass"

        # Create superuser to do both replication connection and SELECT ALL from all source databases/schemas/tables
        su -l postgres -c "psql -c \\"create user replicator superuser password '#{password_cipher}'\\""
        echo "host  all       replicator    192.168.60.0/24     md5" >> /etc/postgresql/#{server[:pg_version]}/main/pg_hba.conf

        systemctl restart postgresql@#{server[:pg_version]}-main

        if [ $(hostname) = 'source-vm' ]
        then
          su -l postgres -c "pg_ctlcluster reload #{server[:pg_version]} main"
          su -l postgres -c "createdb testdb"
          su -l postgres -c "psql -d testdb -a -f /vagrant/gen_data.sql"
          su -l postgres -c "pg_dump -d testdb -s -f /tmp/testdb_schema.sql"
          mv /tmp/testdb_schema.sql /vagrant/testdb_schema.sql
          su -l postgres -c "psql -d testdb -c \\"CREATE EXTENSION pglogical;\\""


          # GCP says these are needed, but pglogical docs do not?
          #su -l postgres -c "psql -d testdb -c \\"GRANT USAGE ON SCHEMA public TO replicator;\\""
          #su -l postgres -c "psql -d testdb -c \\"GRANT SELECT ON ALL TABLES IN SCHEMA public TO replicator;\\""
          #su -l postgres -c "psql -d testdb -c \\"GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO replicator;\\""
          #su -l postgres -c "psql -d testdb -c \\"GRANT USAGE ON SCHEMA pglogical TO replicator;\\""
          #su -l postgres -c "psql -d testdb -c \\"GRANT SELECT ON ALL TABLES IN SCHEMA pglogical TO replicator;\\""
          #su -l postgres -c "psql -d testdb -c \\"GRANT SELECT ON ALL SEQUENCES IN SCHEMA pglogical TO replicator;\\""

          # pglogical docs have this procedure but GCP does not?
          su -l postgres -c "psql -d testdb -c \\"SELECT pglogical.create_node(node_name := 'provider1', dsn := 'host=192.168.60.101 port=5432 dbname=testdb user=replicator');\\""
          su -l postgres -c "psql -d testdb -c \\"SELECT pglogical.replication_set_add_all_tables('default', ARRAY['public']);\\""
        else
          su -l postgres -c "createdb testdb"
          su -l postgres -c "psql -d testdb -a -f /vagrant/testdb_schema.sql"
          su -l postgres -c "psql -d testdb -c \\"CREATE EXTENSION pglogical;\\""
          su -l postgres -c "psql -d testdb -c \\"SELECT pglogical.create_node(node_name := 'subscriber1', dsn := 'host=192.168.60.102 port=5432 dbname=testdb user=replicator');\\""
          su -l postgres -c "psql -d testdb -c \\"SELECT pglogical.create_subscription(subscription_name := 'subscription1', provider_dsn := 'host=192.168.60.101 port=5432 dbname=testdb user=replicator');\\""
        fi
      SHELL
    end
  end
end
