# -*- mode: ruby -*-
# vi: set ft=ruby :

timestamp = Time.now()

servers = [
    {
        :name => "pg10-primary",
        :ipaddr => "192.168.96.101",
        :mem => "1024"
    },
    {
        :name => "pg10-replica1",
        :ipaddr => "192.168.96.102",
        :mem => "1024"
    },
    {
        :name => "pg10-replica2",
        :ipaddr => "192.168.96.103",
        :mem => "1024"
    }
]

Vagrant.configure("2") do |config|
    servers.each do |server|
        config.vm.define server[:name] do |srv|

            srv.vm.box = "bento/ubuntu-18.04"
            srv.vm.network :private_network, ip: server[:ipaddr]
            srv.vm.hostname = server[:name]

            srv.vm.provider :virtualbox do |vb|
                vb.name = server[:name]
                vb.memory = server[:mem]
                vb.gui = false
            end

            srv.vm.provision "shell", inline: <<-SHELL
                cat > /etc/apt/sources.list <<EOF
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic main restricted
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates main restricted

        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic universe
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates universe

        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic multiverse
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates multiverse

        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security main restricted
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security universe
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security multiverse
EOF
                apt-get -y update

                locale-gen en_US && update-locale

                apt-get -y install curl ca-certificates daemontools

                #
                # PostgreSQL 10 Setup
                #
                curl -s #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/ACCC4CF8.asc | apt-key add -
                echo "deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list
                apt-get -y update
                apt-get -y install postgresql-10 postgresql-10-partman
                if [ $(hostname) = 'pg10-primary' ]
                then
                    su -l postgres -c "psql -l"
                    #su -l postgres -c "psql -d test -c \\"create extension pg_partman\\""
                    #su -l postgres -c "psql -d test -c \\"create table dts_tables as select * from pg_tables\\""
                    su -l postgres -c "psql -c \\"create table dts_tables as select * from pg_tables\\""
                fi

                #
                # SSH Key Authentication (for pg_upgrade w/ rsync testing)
                #
                if [ -d /vagrant/keys -a -f /vagrant/keys/test_rsa ]
                then
                    su -l postgres -c "mkdir -p ~/.ssh; chmod 700 ~/.ssh"
                    su -l postgres -c "cp /vagrant/keys/test_rsa ~/.ssh/id_rsa; chmod 600 ~/.ssh/id_rsa"
                    su -l postgres -c "cp /vagrant/keys/test_rsa.pub ~/.ssh/id_rsa.pub; chmod 600 ~/.ssh/id_rsa.pub"
                fi

                # XXX
                su -l vagrant -c "mkdir -p ~/.ssh; chmod 700 ~/.ssh"
                su -l vagrant -c "cat /vagrant/id_rsa.pub >> ~/.ssh/authorized_keys; chmod 600 ~/.ssh/authorized_keys"
                
                #
                # WAL-G Setup
                #
                wget -nv https://github.com/wal-g/wal-g/releases/download/v0.2.9/wal-g.linux-amd64.tar.gz
                tar -xzf wal-g.linux-amd64.tar.gz
                mv wal-g /usr/local/bin
                rm wal-g.linux-amd64.tar.gz

                mkdir -p /etc/wal-g/environment
                chown -R postgres:postgres /etc/wal-g
                chmod 0755 /etc/wal-g
                chmod 0755 /etc/wal-g/environment

                ENVDIR=/etc/wal-g/environment
                echo "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin" > $ENVDIR/PATH
                echo "/var/run/postgresql" > $ENVDIR/PGHOST
                echo "/var/lib/postgresql/12/main" > $ENVDIR/PGDATA
                echo "5432" > $ENVDIR/PGPORT
                echo "postgres" > $ENVDIR/PGUSER
                echo "#{ENV['AWS_ACCOUNT_ID']}" > $ENVDIR/AWS_ACCOUNT_ID
                echo "#{ENV['AWS_ACCESS_KEY_ID']}" > $ENVDIR/AWS_ACCESS_KEY_ID
                echo "#{ENV['AWS_SECRET_ACCESS_KEY']}" > $ENVDIR/AWS_SECRET_ACCESS_KEY
                echo "#{ENV['AWS_DEFAULT_REGION']}" > $ENVDIR/AWS_DEFAULT_REGION
                echo "#{ENV['WALG_S3_PREFIX']}/pg10_replica-#{timestamp.strftime('%Y%m%d%H%M%S')}" > $ENVDIR/WALG_S3_PREFIX
                echo "6" >> $ENVDIR/WALG_DELTA_MAX_STEPS
                chown -R postgres:postgres $ENVDIR
                
                # Configure PostgreSQL WAL archiving
                echo "archive_mode = on" >> /etc/postgresql/10/main/conf.d/wal-g.conf
                echo "wal_level = replica" >> /etc/postgresql/10/main/conf.d/wal-g.conf
                echo "archive_command = 'envdir /etc/wal-g/environment /usr/local/bin/wal-g wal-push %p'" >> /etc/postgresql/10/main/conf.d/wal-g.conf
                echo "max_wal_senders = 10" >> /etc/postgresql/10/main/conf.d/replication.conf
                echo "listen_addresses = '*'" >> /etc/postgresql/10/main/conf.d/replication.conf
                echo "hot_standby = on" >> /etc/postgresql/10/main/conf.d/replication.conf
                echo "max_replication_slots = 10" >> /etc/postgresql/10/main/conf.d/replication.conf
                echo "host         replication            replicator      192.168.96.0/24      md5" >> /etc/postgresql/10/main/pg_hba.conf
                chown postgres:postgres /etc/postgresql/10/main/conf.d/*.conf

                su -l postgres -c "echo 'export PATH=/usr/lib/postgresql/10/bin:\$PATH' >> /var/lib/postgresql/.pgsql_profile"
                su -l postgres -c "echo '*:*:*:replicator:replicator123' >> /var/lib/postgresql/.pgpass"
                su -l postgres -c "echo '*:*:*:postgres:postgres@123!' >> /var/lib/postgresql/.pgpass"
                su -l postgres -c "chmod 0600 /var/lib/postgresql/.pgpass"

                if [ $(hostname) = 'pg10-primary' ]
                then
                    systemctl enable postgresql@10-main
                    systemctl restart postgresql@10-main

                    su -l postgres -c "psql -c \\"create user replicator replication password 'replicator123'\\""
                    #su -l postgres -c "psql -c \\"select * from pg_create_physical_replication_slot('replica1')\\""

                    su -l postgres -c "envdir /etc/wal-g/environment /usr/local/bin/wal-g backup-push /var/lib/postgresql/10/main"
                    su -l postgres -c "psql -c \\"create table dts_tables2 as select * from pg_tables\\""
                    su -l postgres -c "envdir /etc/wal-g/environment /usr/local/bin/wal-g backup-push /var/lib/postgresql/10/main"
                else
                    systemctl stop postgresql@10-main
                    su -l postgres -c "rm -rf /var/lib/postgresql/10/main"
                    su -l postgres -c "envdir /etc/wal-g/environment /usr/local/bin/wal-g backup-fetch /var/lib/postgresql/10/main LATEST"
                    echo "standby_mode = on" >> /var/lib/postgresql/10/main/recovery.conf
                    echo "restore_command = 'envdir /etc/wal-g/environment /usr/local/bin/wal-g wal-fetch %f %p'" >> /var/lib/postgresql/10/main/recovery.conf
                    if [ $(hostname) = 'pg10-replica1' ]
                    then
                        echo "No streaming replication from A to B"
                        #echo "primary_slot_name = 'replica1'" >> /var/lib/postgresql/10/main/recovery.conf
                        #echo "primary_conninfo = 'host=192.168.96.101 user=replicator'" >> /var/lib/postgresql/10/main/recovery.conf
                    elif [ $(hostname) = 'pg10-replica2' ]
                    then
                        echo "primary_slot_name = 'replica2'" >> /var/lib/postgresql/10/main/recovery.conf
                        echo "primary_conninfo = 'host=192.168.96.102 user=replicator'" >> /var/lib/postgresql/10/main/recovery.conf
                    fi
                    echo "recovery_target_timeline = 'latest'" >> /var/lib/postgresql/10/main/recovery.conf
                    chown postgres:postgres /var/lib/postgresql/10/main/recovery.conf

                    systemctl enable postgresql@10-main
                    systemctl start postgresql@10-main
                    su -l postgres -c "psql -c \\"select pg_is_in_recovery()\\""
                    if [ $(hostname) = 'pg10-replica1' ]
                    then
                        echo "Skipping streaming replication"
                        su -l postgres -c "psql -c \\"select * from pg_create_physical_replication_slot('replica2')\\""
                    fi
                fi

            SHELL
        end
    end
end
