# -*- mode: ruby -*-
# vi: set ft=ruby :

#
# Simulate using logical replication to migrate a database (or cluster of databases)
# from Ubuntu 18.04 (bionic) to 22.04 (jammy) and the new glibc changes that force us
# to take this path (or pg_dump/restore everything which means much more downtime).
#
# * Both old and new are PG 12 but we can play with PG 14 on the target side.
# * Source DB does NOT have data checksums enabled, but target will.
# * Target DB should be sure to have HugePages properly sized and enabled (huge_pages=on).
#

# Load setup Vagrantfile
load "../Vagrantfile.setup"

password_cipher = %x(openssl rand -hex 12 | tr -d '\n')

servers = [
  {
    :name => "pg-src",
    :ipaddr => "192.168.60.184",
    :box => "bento/ubuntu-18.04",
    :pg_version => 12
  },
  {
    :name => "pg-dst",
    :ipaddr => "192.168.60.224",
    :box => "bento/ubuntu-22.04",
    :pg_version => 14
  }
]

Vagrant.configure("2") do |config|
  servers.each do |server|
    config.vm.define server[:name] do |srv|

      srv.vm.box = server[:box]
      srv.vm.network :private_network, ip: server[:ipaddr]
      srv.vm.hostname = server[:name]

      srv.vm.provider :virtualbox do |vb|
        vb.name = server[:name]
        vb.memory = 1024
        vb.gui = false
      end

      srv.vm.provision "shell", inline: <<-SHELL
        apt-get -y install postgresql-common tmux
        if [ $(hostname) = 'pg-dst' ]
        then
          # Enable data checksums on the replica (but not primary)
          echo "initdb_options = '--data-checksums'" >> /etc/postgresql-common/createcluster.conf
        fi

        apt-get -y install postgresql-#{server[:pg_version]} \
          postgresql-#{server[:pg_version]}-partman

        echo "listen_addresses = '*'" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf

        if [ $(hostname) = 'pg-src' ]
        then
          # For GCP migration via DMS, max_replication_slots, max_wal_senders & max_worker_processes
          # needs to provide one slot for each DB, plus what is already in use
          echo "wal_level = logical" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
          echo "max_worker_processes = 10" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
          echo "max_replication_slots = 10" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
          echo "max_wal_senders = 10" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
          #echo "wal_sender_timeout = 0" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
          #echo "track_commit_timestamp = on" >> /etc/postgresql/#{server[:pg_version]}/main/postgresql.conf
        fi

        su -l postgres -c "echo 'export PATH=/usr/lib/postgresql/#{server[:pg_version]}/bin:\$PATH' >> /var/lib/postgresql/.pgsql_profile"
        su -l postgres -c "echo '*:*:*:replicator:#{password_cipher}' >> /var/lib/postgresql/.pgpass"
        su -l postgres -c "chmod 0600 /var/lib/postgresql/.pgpass"

        # Create superuser to do both replication connection and SELECT ALL from all source databases/schemas/tables
        #su -l postgres -c "psql -c \\"create user replicator superuser password '#{password_cipher}';\\""
        su -l postgres -c "psql -a -c \\"create user replicator replication password '#{password_cipher}';\\""
        echo "host  all       replicator    192.168.60.0/24     md5" >> /etc/postgresql/#{server[:pg_version]}/main/pg_hba.conf

        systemctl restart postgresql@#{server[:pg_version]}-main

        if [ $(hostname) = 'pg-src' ]
        then
          #
          # Publisher
          #

          # Create testdb and load with data
          su -l postgres -c "psql -a -c \\"select version();\\""
          su -l postgres -c "createdb testdb"
          su -l postgres -c "psql -a -d testdb -c \\"alter default privileges in schema public grant select on tables to replicator;\\""
          su -l postgres -c "pgbench -i -s 100 testdb"
          #su -l postgres -c "psql -a -d testdb -c \\"grant select on all tables in schema public to replicator;\\""
          su -l postgres -c "psql -a -d testdb -c \\"select relname, n_live_tup from pg_stat_all_tables where schemaname='public' order by n_live_tup;\\""

          # Dump schema-only
          su -l postgres -c "pg_dump -d testdb -s -f /tmp/testdb_schema.sql"
          mv /tmp/testdb_schema.sql /vagrant/testdb_schema.sql

          # CREATE PUBLICATION HERE
          su -l postgres -c "psql -a -d testdb -c \\"CREATE PUBLICATION testdb_pub01 FOR TABLE pgbench_branches, pgbench_history, pgbench_tellers;\\""
          su -l postgres -c "psql -a -d testdb -c \\"CREATE PUBLICATION testdb_pub02 FOR TABLE pgbench_accounts;\\""

        else

          #
          # Subscriber
          #

          # Create empty testdb and load schema-only dump
          su -l postgres -c "createdb testdb"
          su -l postgres -c "psql -a -d testdb -c \\"select version();\\""
          su -l postgres -c "psql -d testdb -a -f /vagrant/testdb_schema.sql"

          # CREATE SUBSCRIPTION HERE
          su -l postgres -c "psql -a -d testdb -c \\"CREATE SUBSCRIPTION testdb_sub01 CONNECTION 'host=192.168.60.184 port=5432 dbname=testdb user=replicator' PUBLICATION testdb_pub01;\\""
          # su -l postgres -c "psql -a -d testdb -c \\"CREATE SUBSCRIPTION testdb_sub02 CONNECTION 'host=192.168.60.184 port=5432 dbname=testdb user=replicator' PUBLICATION testdb_pub02 with (slot_name = 'testdb_sub02', create_slot='false' , enabled='false', copy_data='false');\\""
        fi
      SHELL
    end
  end
end
