# -*- mode: ruby -*-
# vi: set ft=ruby :

# define hostname
NAME = "uptest-pg96"

Vagrant.configure("2") do |config|
    config.vm.define NAME
    config.vm.box = "bento/ubuntu-18.04"
    config.vm.hostname = NAME

    config.vm.provision "shell", inline: <<-SHELL
        locale-gen en_US && update-locale
        
        #
        # PostgreSQL 9.6 Setup
        #
        cat > /etc/apt/sources.list <<EOF
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic main restricted
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates main restricted

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic universe
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates universe

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic multiverse
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates multiverse

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security main restricted
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security universe
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security multiverse
EOF
        apt-get -y update
        apt-get -y install curl ca-certificates daemontools
        curl -s #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/ACCC4CF8.asc | apt-key add -
        echo "deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list
        apt-get -y update

        apt-get -y install postgresql-9.6
        systemctl stop postgresql@9.6-main
        pg_dropcluster 9.6 main
        pg_createcluster --lc-collate=en_US --lc-ctype=en_US --lc-messages=en_US --lc-monetary=C --lc-numeric=C --lc-time=C 9.6 main
        systemctl start postgresql@9.6-main
        #su -l postgres -c "psql -f /vagrant/template_change.sql"
        su -l postgres -c "psql <<EOF
update pg_database set datistemplate = FALSE where datname = 'template1';
drop database template1;
create database template1 with template = template0 encoding = 'UTF8' lc_ctype='en_US.utf8' lc_collate='en_US.utf8';
update pg_database set datistemplate = TRUE where datname = 'template1';
create database test lc_ctype='en_US' lc_collate='en_US' encoding='LATIN1' template='template0';
update pg_database set encoding = pg_char_to_encoding('UTF8') where datname = 'test';
EOF"
        su -l postgres -c "psql -l"

        su -l postgres -c "psql -d test <<EOF
CREATE TABLE users (
  id    SERIAL PRIMARY KEY,
  email VARCHAR(40) NOT NULL UNIQUE,
  created_at    TIMESTAMP NOT NULL
);

INSERT INTO users (email, created_at)
SELECT
  'user_' || seq || '@' || (
    CASE (RANDOM() * 2)::INT
      WHEN 0 THEN 'gmail'
      WHEN 1 THEN 'hotmail'
      WHEN 2 THEN 'yahoo'
    END
  ) || '.com' AS email,
  timestamp '2016-01-10 20:00:00' +
       random() * (timestamp '2020-01-20 20:00:00' -
                   timestamp '2016-01-10 20:00:00')
FROM GENERATE_SERIES(1, 500000) seq;

CREATE INDEX users_created_at_idx ON users(created_at);

VACUUM ANALYZE users;
EOF"

        #
        # WAL-G Setup
        #
        wget -nv https://github.com/wal-g/wal-g/releases/download/v0.2.15/wal-g.linux-amd64.tar.gz
        tar -xzf wal-g.linux-amd64.tar.gz
        mv wal-g /usr/local/bin
        rm wal-g.linux-amd64.tar.gz

        mkdir -p /etc/wal-g/environment
        chown -R postgres:postgres /etc/wal-g
        chmod 0755 /etc/wal-g
        chmod 0755 /etc/wal-g/environment
        
        #
        # WAL-G Scripts
        #
        ENVDIR=/etc/wal-g/environment
        echo "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin" > $ENVDIR/PATH
        echo "/var/run/postgresql" > $ENVDIR/PGHOST
        echo "/var/lib/postgresql/9.6/main" > $ENVDIR/PGDATA
        echo "5432" > $ENVDIR/PGPORT
        echo "postgres" > $ENVDIR/PGUSER
        echo "#{ENV['AWS_ACCOUNT_ID']}" > $ENVDIR/AWS_ACCOUNT_ID
        echo "#{ENV['AWS_ACCESS_KEY_ID']}" > $ENVDIR/AWS_ACCESS_KEY_ID
        echo "#{ENV['AWS_SECRET_ACCESS_KEY']}" > $ENVDIR/AWS_SECRET_ACCESS_KEY
        echo "#{ENV['AWS_DEFAULT_REGION']}" > $ENVDIR/AWS_DEFAULT_REGION
        #echo "#{ENV['WALG_STAGING_GPG_KEY_ID']}" > $ENVDIR/WALE_GPG_KEY_ID
        echo "#{ENV['WALG_S3_PREFIX']}/upgrade_testing/9.6" > $ENVDIR/WALG_S3_PREFIX
        chown -R postgres:postgres $ENVDIR

        # Configure PostgreSQL WAL archiving
        echo "wal_level = replica" >> /etc/postgresql/9.6/main/conf.d/wal-g.conf
        echo "archive_mode = on" >> /etc/postgresql/9.6/main/conf.d/wal-g.conf
        echo "archive_command = 'envdir /etc/wal-g/environment /usr/local/bin/wal-g wal-push %p'" >> /etc/postgresql/9.6/main/conf.d/wal-g.conf
        systemctl restart postgresql@9.6-main

        #
        # Install PG 12
        #
        apt-get -y install postgresql-12
        systemctl stop postgresql@12-main

        pg_dropcluster 12 main
        ###pg_createcluster --lc-collate=en_US --lc-ctype=en_US --lc-messages=en_US --lc-monetary=C --lc-numeric=C --lc-time=C 12 main
        #pg_createcluster 12 main -- --data-checksums ## Can't upgrade directly from no checksums to checksums
        #pg_createcluster 12 main

        ###echo "wal_level = replica" >> /etc/postgresql/12/main/conf.d/wal-g.conf
        ###echo "archive_mode = on" >> /etc/postgresql/12/main/conf.d/wal-g.conf
        ###echo "archive_command = 'envdir /etc/wal-g/environment /usr/local/bin/wal-g wal-push %p'" >> /etc/postgresql/12/main/conf.d/wal-g.conf

        ###systemctl start postgresql@12-main
        ###su -l postgres -c "psql -p 5433 <<EOF
###update pg_database set datistemplate = FALSE where datname = 'template1';
###drop database template1;
###create database template1 with template = template0 encoding = 'UTF8' lc_ctype='en_US.utf8' lc_collate='en_US.utf8';
###update pg_database set datistemplate = TRUE where datname = 'template1';
###EOF"
        ###su -l postgres -c "psql -p 5433 -l"
        ###systemctl stop postgresql@12-main

        #systemctl stop postgresql@9.6-main
        #systemctl disable postgresql@9.6-main
        #su -l postgres -c "sh /vagrant/check_upgrade.sh && sh /vagrant/upgrade.sh"
    SHELL
end
