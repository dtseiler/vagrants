# -*- mode: ruby -*-
# vi: set ft=ruby :

# define hostname
NAME = "ubuntu1804-pg12"

Vagrant.configure("2") do |config|
    config.vm.define NAME
    config.vm.box = "bento/ubuntu-18.04"
    config.vm.hostname = NAME

    config.vm.provision "shell", inline: <<-SHELL
        cat > /etc/apt/sources.list <<EOF
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic main restricted
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates main restricted

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic universe
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates universe

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic multiverse
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates multiverse

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security main restricted
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security universe
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security multiverse
EOF
        apt-get -y update
        apt-get -y install curl ca-certificates
        curl -s #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/ACCC4CF8.asc | apt-key add -
        echo "deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list
        apt-get -y update
        apt-get -y install postgresql-12 postgresql-12-partman
        echo "shared_preload_libraries = 'pg_partman_bgw'" >> /etc/postgresql/12/main/postgresql.conf
        systemctl restart postgresql
        su -l postgres -c "createdb test"
        su -l postgres -c "psql -d test -c \\"create schema partman\\""
        su -l postgres -c "psql -d test -c \\"create extension pg_partman schema partman\\""
        su -l postgres -c "psql -l"
        su -l postgres -c "psql -d test -c \\"\\dx\\""

        su -l postgres -c "psql -aX -d test <<EOF
CREATE TABLE users (
  id    VARCHAR(36) PRIMARY KEY,
  email VARCHAR(40) NOT NULL,
  created_at    TIMESTAMP NOT NULL
);

-- Use a fake UUID generator here
INSERT INTO users (id, email, created_at)
SELECT
  md5(random()::text || clock_timestamp()::text)::uuid as id,
  'user_' || seq || '@' || (
    CASE (RANDOM() * 2)::INT
      WHEN 0 THEN 'gmail'
      WHEN 1 THEN 'hotmail'
      WHEN 2 THEN 'yahoo'
    END
  ) || '.com' AS email,
  timestamp '2020-07-01 00:00:00' +
       random() * (now() - timestamp '2020-07-01 00:00:00')
FROM GENERATE_SERIES(1, 5000000) seq;

CREATE INDEX users_created_at_idx ON users(created_at);

SELECT date_trunc('day', created_at) as created_day, count(*)
FROM users
GROUP BY created_day
ORDER BY created_day;

VACUUM ANALYZE users;

\\d users

--
-- Downtime would BEGIN here
--

\\timing on

ALTER TABLE users DROP CONSTRAINT users_pkey;
ALTER TABLE users RENAME TO users_source; 

CREATE TABLE users
  (LIKE users_source INCLUDING ALL)
PARTITION BY RANGE (created_at);
ALTER TABLE users ADD PRIMARY KEY (id, created_at);

SELECT relname, n_live_tup
FROM pg_stat_all_tables
WHERE relname like 'users%'
ORDER BY relname;

SELECT partman.create_parent('public.users', 'created_at', 'native', 'daily', 
    p_automatic_maintenance := 'off', 
    p_debug := true, 
    p_start_partition := 'tomorrow'
);
DROP TABLE users_default;
ALTER TABLE users_source RENAME TO users_default; 
ALTER TABLE users ATTACH PARTITION users_default DEFAULT;
UPDATE partman.part_config SET automatic_maintenance='on' WHERE parent_table='public.users';

--
-- Downtime would END here
--

SELECT relname, n_live_tup
FROM pg_stat_all_tables
WHERE relname like 'users%'
ORDER BY relname;

CALL partman.partition_data_proc('public.users');
VACUUM ANALYZE users;
VACUUM ANALYZE users_default;
REINDEX TABLE users_default;

SELECT relname, n_live_tup
FROM pg_stat_all_tables
WHERE relname like 'users%'
ORDER BY relname;

UPDATE partman.part_config SET retention = '30 days', retention_keep_table = false where parent_table='public.users';
SELECT partman.run_maintenance('public.users');

SELECT relname, n_live_tup
FROM pg_stat_all_tables
WHERE relname like 'users%'
ORDER BY relname;

\\d users
\\d users_default
EOF"

    SHELL
end
