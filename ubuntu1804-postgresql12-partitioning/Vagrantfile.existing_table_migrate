# -*- mode: ruby -*-
# vi: set ft=ruby :

# define hostname
NAME = "ubuntu1804-pg12"

Vagrant.configure("2") do |config|
    config.vm.define NAME
    config.vm.box = "bento/ubuntu-18.04"
    config.vm.hostname = NAME

    config.vm.provision "shell", inline: <<-SHELL
        cat > /etc/apt/sources.list <<EOF
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic main restricted
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates main restricted

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic universe
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates universe

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic multiverse
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates multiverse

deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security main restricted
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security universe
deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security multiverse
EOF
        apt-get -y update
        apt-get -y install curl ca-certificates
        curl -s #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/ACCC4CF8.asc | apt-key add -
        echo "deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list
        apt-get -y update
        apt-get -y install postgresql-12 postgresql-12-partman
        echo "shared_preload_libraries = 'pg_partman_bgw'" >> /etc/postgresql/12/main/postgresql.conf
        echo "pg_partman_bgw.dbname = 'test'" >> /etc/postgresql/12/main/postgresql.conf
        systemctl restart postgresql
        su -l postgres -c "createdb test"
        su -l postgres -c "psql -d test -c \\"create schema partman\\""
        su -l postgres -c "psql -d test -c \\"create extension pg_partman schema partman\\""
        su -l postgres -c "psql -l"
        su -l postgres -c "psql -d test -c \\"\\dx\\""

        su -l postgres -c "psql -aX -d test <<EOF
CREATE TABLE user_aggregations (
  user_id       VARCHAR(36) NOT NULL,
  primary_international_id       VARCHAR(36) NOT NULL,
  device_id     VARCHAR(36) NOT NULL,
  date          TIMESTAMPTZ NOT NULL
);

-- Use a fake UUID generator here
INSERT INTO user_aggregations (user_id, primary_international_id, device_id, date)
SELECT
  md5(random()::text || clock_timestamp()::text)::uuid as user_id,
  md5(random()::text || clock_timestamp()::text)::uuid as primary_international_id,
  md5(random()::text || clock_timestamp()::text)::uuid as device_id,
  timestamp '2018-07-01 00:00:00' +
       random() * (now() - timestamp '2018-07-01 00:00:00') as date
FROM GENERATE_SERIES(1, 5000000) seq;

CREATE INDEX user_aggregations_date_idx ON user_aggregations (date DESC);
CREATE INDEX user_aggregations_foo_idx ON user_aggregations (primary_international_id, date, user_id);

SELECT date_trunc('day', date) as date_day, count(*)
FROM user_aggregations
GROUP BY date_day
ORDER BY date_day;

VACUUM ANALYZE user_aggregations;

\\d user_aggregations

--
-- Downtime would BEGIN here
--

\\timing on

ALTER INDEX user_aggregations_date_idx RENAME TO user_aggregations_date_idx_old;
DROP INDEX user_aggregations_foo_idx;
ALTER TABLE user_aggregations RENAME TO user_aggregations_old; 

CREATE TABLE user_aggregations
  (LIKE user_aggregations_old EXCLUDING INDEXES)
PARTITION BY RANGE (date);

-- Show row counts
SELECT relname, n_live_tup
FROM pg_stat_all_tables
WHERE relname like 'user_aggregations%'
ORDER BY relname;

SELECT partman.create_parent('public.user_aggregations', 'date', 'native', 'monthly', 
    p_automatic_maintenance := 'on', 
    p_start_partition := '2018-07-01'
);

-- Show size and row counts
SELECT nspname || '.' || relname AS "relation",
    pg_size_pretty(pg_relation_size(C.oid)) AS "size"
  FROM pg_class C
  LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
  WHERE nspname NOT IN ('pg_catalog', 'information_schema')
  AND relname like 'user_aggregations%_old'
  ORDER BY pg_relation_size(C.oid) DESC;

SELECT relname, n_live_tup
FROM pg_stat_all_tables
WHERE relname like 'user_aggregations%'
ORDER BY relname;


-- Start out processing only the last 6 months (180 days)
CALL partman.partition_data_proc(
    p_parent_table := 'public.user_aggregations', 
    p_source_table := 'public.user_aggregations_old',
    p_interval := '1 day',
    p_batch := 180,
    p_order := 'DESC'
);
VACUUM ANALYZE user_aggregations;
VACUUM ANALYZE user_aggregations_old;
REINDEX TABLE user_aggregations_old;

-- Build indexes for previous 6 months partitions (assuming currently in Nov 2020)
CREATE INDEX CONCURRENTLY user_aggregations_p2020_11_date_idx ON user_aggregations_p2020_11 (date DESC);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_11_foo_idx ON user_aggregations_p2020_11 (primary_international_id, date, user_id);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_10_date_idx ON user_aggregations_p2020_10 (date DESC);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_10_foo_idx ON user_aggregations_p2020_10 (primary_international_id, date, user_id);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_09_date_idx ON user_aggregations_p2020_09 (date DESC);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_09_foo_idx ON user_aggregations_p2020_09 (primary_international_id, date, user_id);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_08_date_idx ON user_aggregations_p2020_08 (date DESC);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_08_foo_idx ON user_aggregations_p2020_08 (primary_international_id, date, user_id);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_07_date_idx ON user_aggregations_p2020_07 (date DESC);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_07_foo_idx ON user_aggregations_p2020_07 (primary_international_id, date, user_id);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_06_date_idx ON user_aggregations_p2020_06 (date DESC);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_06_foo_idx ON user_aggregations_p2020_06 (primary_international_id, date, user_id);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_05_date_idx ON user_aggregations_p2020_05 (date DESC);
CREATE INDEX CONCURRENTLY user_aggregations_p2020_05_foo_idx ON user_aggregations_p2020_05 (primary_international_id, date, user_id);

-- Show size and row counts
SELECT nspname || '.' || relname AS "relation",
    pg_size_pretty(pg_relation_size(C.oid)) AS "size"
  FROM pg_class C
  LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
  WHERE nspname NOT IN ('pg_catalog', 'information_schema')
  AND relname like 'user_aggregations%_old'
  ORDER BY pg_relation_size(C.oid) DESC;

SELECT relname, n_live_tup
FROM pg_stat_all_tables
WHERE relname like 'user_aggregations%'
ORDER BY relname;

--
-- Downtime would END here
--


-- Now migrate the rest of the data
CALL partman.partition_data_proc(
    p_parent_table := 'public.user_aggregations', 
    p_source_table := 'public.user_aggregations_old',
    p_interval := '1 day'
);
VACUUM ANALYZE user_aggregations;

-- In real scenario you could just drop the old table. 
-- I'm vacuuming here to show it being resized to zero.
VACUUM ANALYZE user_aggregations_old;
REINDEX TABLE user_aggregations_old;

-- Show size and row counts
SELECT nspname || '.' || relname AS "relation",
    pg_size_pretty(pg_relation_size(C.oid)) AS "size"
  FROM pg_class C
  LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
  WHERE nspname NOT IN ('pg_catalog', 'information_schema')
  AND relname like 'user_aggregations%_old'
  ORDER BY pg_relation_size(C.oid) DESC;

SELECT relname, n_live_tup
FROM pg_stat_all_tables
WHERE relname like 'user_aggregations%'
ORDER BY relname;

EOF"

        # Create remaining partition indexes and the parent indexes
        PART_TABLES=(`sudo -u postgres psql -AtX -d test -c "select relname from pg_stat_user_tables where relname like 'user_aggregations_p%' order by relname desc"`)

        for part_tab in "${PART_TABLES[@]}"
        do
            echo "Creating indexes for $part_tab"
            sudo -u postgres psql -aX -d test -c "CREATE INDEX CONCURRENTLY IF NOT EXISTS ${part_tab}_foo_idx ON ${part_tab} (primary_international_id, date, user_id)";
            sudo -u postgres psql -aX -d test -c "CREATE INDEX CONCURRENTLY IF NOT EXISTS ${part_tab}_date_idx ON ${part_tab} (date DESC)";
        done

        sudo -u postgres psql -aX -d test -c "CREATE INDEX user_aggregations_foo_idx ON user_aggregations (primary_international_id, date, user_id)";
        sudo -u postgres psql -aX -d test -c "CREATE INDEX user_aggregations_date_idx ON user_aggregations (date DESC)";
    SHELL
end
