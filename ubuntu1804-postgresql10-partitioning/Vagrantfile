# -*- mode: ruby -*-
# vi: set ft=ruby :

servers = [
    {
        :name => "pg10-partman",
        :ipaddr => "192.168.100.101",
        :mem => "2048"
    }
]

Vagrant.configure("2") do |config|
    servers.each do |server|
        config.vm.define server[:name] do |srv|

            srv.vm.box = "bento/ubuntu-18.04"
            srv.vm.network :private_network, ip: server[:ipaddr]
            srv.vm.hostname = server[:name]

            srv.vm.provider :virtualbox do |vb|
                vb.name = server[:name]
                vb.memory = server[:mem]
                vb.gui = false
            end

            srv.vm.provision "shell", inline: <<-SHELL
                cat > /etc/apt/sources.list <<EOF
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic main restricted
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates main restricted

        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic universe
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates universe

        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic multiverse
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-updates multiverse

        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security main restricted
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security universe
        deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/archive.ubuntu.com/ubuntu/ bionic-security multiverse
EOF
                apt-get -y update

                locale-gen en_US && update-locale

                apt-get -y install curl ca-certificates

                #
                # PostgreSQL 10 Setup
                #
                curl -s #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/ACCC4CF8.asc | apt-key add -
                echo "deb [arch=amd64] #{ENV['APT_MIRROR']}/mirror/apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list
                apt-get -y update
                apt-get -y install postgresql-10 postgresql-10-partman python-psycopg2

                #
                # SSH Key Authentication (for pg_upgrade w/ rsync testing)
                #
                if [ -d /vagrant/keys -a -f /vagrant/keys/test_rsa ]
                then
                    su -l postgres -c "mkdir -p ~/.ssh; chmod 700 ~/.ssh"
                    su -l postgres -c "cp /vagrant/keys/test_rsa ~/.ssh/id_rsa; chmod 600 ~/.ssh/id_rsa"
                    su -l postgres -c "cp /vagrant/keys/test_rsa.pub ~/.ssh/id_rsa.pub; chmod 600 ~/.ssh/id_rsa.pub"
                fi

                # Configure PostgreSQL WAL archiving
                echo "wal_level = replica" >> /etc/postgresql/10/main/postgresql.conf
                echo "archive_mode = off"  >> /etc/postgresql/10/main/postgresql.conf
                echo "shared_preload_libraries = 'pg_partman_bgw'" >> /etc/postgresql/10/main/postgresql.conf

                su -l postgres -c "echo 'export PATH=/usr/lib/postgresql/10/bin:\$PATH' >> /var/lib/postgresql/.pgsql_profile"

                systemctl enable postgresql@10-main
                systemctl restart postgresql@10-main

                su -l postgres -c "createdb test"
                su -l postgres -c "psql -d test -c \\"create schema partman\\""
                su -l postgres -c "psql -d test -c \\"create extension pg_partman schema partman\\""
                su -l postgres -c "psql -l"
                su -l postgres -c "psql -d test -c \\"\\dx\\""

                su -l postgres -c "psql -d test <<EOF
CREATE TABLE orders (
  order_id      VARCHAR(36) PRIMARY KEY,
  email         VARCHAR(40) NOT NULL,
  created_at    TIMESTAMP NOT NULL
);

-- Use a fake UUID generator here
INSERT INTO orders (order_id, email, created_at)
SELECT
  md5(random()::text || clock_timestamp()::text)::uuid as order_id,
  'order_' || seq || '@' || (
    CASE (RANDOM() * 2)::INT
      WHEN 0 THEN 'gmail'
      WHEN 1 THEN 'hotmail'
      WHEN 2 THEN 'yahoo'
    END
  ) || '.com' AS email,
  timestamp '2020-07-01 00:00:00' +
       random() * (now() - timestamp '2020-07-01 00:00:00')
FROM GENERATE_SERIES(1, 5000000) seq;

CREATE INDEX orders_email_idx ON orders (email);
CREATE INDEX orders_created_at_idx ON orders (created_at);

VACUUM ANALYZE orders;

SELECT date_trunc('day', created_at) as created_day, count(*)
FROM orders
GROUP BY created_day
ORDER BY created_day;

SELECT partman.create_parent(
    'public.orders', 
    'created_at', 
    'partman', 
    'daily', 
    p_start_partition := '2020-07-01',
    p_debug := true
);
EOF"

                # Partition the data
                su -l postgres -c 'python /usr/lib/postgresql/10/bin/partition_data.py -c "dbname=test user=postgres" -p public.orders -t time -i "1 hour"'

                su -l postgres -c "psql -d test <<EOF
VACUUM ANALYZE orders;
REINDEX TABLE orders;

UPDATE partman.part_config
SET retention = '30 days', retention_keep_table = false
WHERE parent_table='public.orders';

SELECT partman.run_maintenance('public.orders');

SELECT relname, n_live_tup FROM pg_stat_all_tables
WHERE relname LIKE 'orders%'
ORDER BY relname;

-- Insert some more data
INSERT INTO orders (order_id, email, created_at)
SELECT
  md5(random()::text || clock_timestamp()::text)::uuid as order_id,
  'order_' || seq || '@' || (
    CASE (RANDOM() * 2)::INT
      WHEN 0 THEN 'gmail'
      WHEN 1 THEN 'hotmail'
      WHEN 2 THEN 'yahoo'
    END
  ) || '.com' AS email,
  timestamp '2020-10-15 00:00:00' +
       random() * (now() - timestamp '2020-10-15 00:00:00')
FROM GENERATE_SERIES(1, 5000000) seq;

ANALYZE orders;

SELECT relname, n_live_tup FROM pg_stat_all_tables
WHERE relname LIKE 'orders%'
ORDER BY relname;

EOF"
            SHELL
        end
    end
end
